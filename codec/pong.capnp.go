// Code generated by capnpc-go. DO NOT EDIT.

package codec

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Pong struct{ capnp.Struct }

// Pong_TypeID is the unique identifier for the type Pong.
const Pong_TypeID = 0xe5b532ff4fa02dff

func NewPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Pong{st}, err
}

func NewRootPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Pong{st}, err
}

func ReadRootPong(msg *capnp.Message) (Pong, error) {
	root, err := msg.RootPtr()
	return Pong{root.Struct()}, err
}

func (s Pong) String() string {
	str, _ := text.Marshal(0xe5b532ff4fa02dff, s.Struct)
	return str
}

func (s Pong) Nonce() uint32 {
	return s.Struct.Uint32(0)
}

func (s Pong) SetNonce(v uint32) {
	s.Struct.SetUint32(0, v)
}

// Pong_List is a list of Pong.
type Pong_List struct{ capnp.List }

// NewPong creates a new list of Pong.
func NewPong_List(s *capnp.Segment, sz int32) (Pong_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Pong_List{l}, err
}

func (s Pong_List) At(i int) Pong { return Pong{s.List.Struct(i)} }

func (s Pong_List) Set(i int, v Pong) error { return s.List.SetStruct(i, v.Struct) }

func (s Pong_List) String() string {
	str, _ := text.MarshalList(0xe5b532ff4fa02dff, s.List)
	return str
}

// Pong_Promise is a wrapper for a Pong promised by a client call.
type Pong_Promise struct{ *capnp.Pipeline }

func (p Pong_Promise) Struct() (Pong, error) {
	s, err := p.Pipeline.Struct()
	return Pong{s}, err
}

const schema_cf51decd769a7cb5 = "x\xda2p`t`2d\xf5\xe7d`\x08\xcca" +
	"e\xfb\xff_w\x81\xff\x7f\xa3\xadO\x19\x02\xb9\x19\x19" +
	"\xffo\xad\x99Uv\xf6^\xe0y\x06\x16v\x06\x06\xe1" +
	"^\x96&\xe1\x89P\x96=\xc3\x7f\x06\xf9\xff\x05\xf9y" +
	"\xe9z\xc9\x89\x05\x8cy\x05V\x01\xf9y\xe9\x0c\x01\x8c" +
	"\x8c\x81,\xcc,\x0c\x0c,\x8c\x0c\x0c\x82\xbcF\x0c\x0c" +
	"\x81\x1c\xcc\x8c\x81\"L\x8c\xf2y\xf9y\xc9\xa9\x8c\x1c" +
	"\x0cL\x8c\x1c\x0c\x8c\x80\x00\x00\x00\xff\xff\x07^\x1d\x0a"

func init() {
	schemas.Register(schema_cf51decd769a7cb5,
		0xe5b532ff4fa02dff)
}
