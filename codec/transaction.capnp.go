// Code generated by capnpc-go. DO NOT EDIT.

package codec

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Transaction struct{ capnp.Struct }

// Transaction_TypeID is the unique identifier for the type Transaction.
const Transaction_TypeID = 0xec9fd906d129035f

func NewTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Transaction{st}, err
}

func NewRootTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Transaction{st}, err
}

func ReadRootTransaction(msg *capnp.Message) (Transaction, error) {
	root, err := msg.RootPtr()
	return Transaction{root.Struct()}, err
}

func (s Transaction) String() string {
	str, _ := text.Marshal(0xec9fd906d129035f, s.Struct)
	return str
}

func (s Transaction) Transfers() (Transfer_List, error) {
	p, err := s.Struct.Ptr(0)
	return Transfer_List{List: p.List()}, err
}

func (s Transaction) HasTransfers() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Transaction) SetTransfers(v Transfer_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTransfers sets the transfers field to a newly
// allocated Transfer_List, preferring placement in s's segment.
func (s Transaction) NewTransfers(n int32) (Transfer_List, error) {
	l, err := NewTransfer_List(s.Struct.Segment(), n)
	if err != nil {
		return Transfer_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Transaction) Fees() (Fee_List, error) {
	p, err := s.Struct.Ptr(1)
	return Fee_List{List: p.List()}, err
}

func (s Transaction) HasFees() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Transaction) SetFees(v Fee_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewFees sets the fees field to a newly
// allocated Fee_List, preferring placement in s's segment.
func (s Transaction) NewFees(n int32) (Fee_List, error) {
	l, err := NewFee_List(s.Struct.Segment(), n)
	if err != nil {
		return Fee_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Transaction) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Transaction) HasData() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Transaction) SetData(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Transaction) Nonce() uint64 {
	return s.Struct.Uint64(0)
}

func (s Transaction) SetNonce(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Transaction) Signatures() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.DataList{List: p.List()}, err
}

func (s Transaction) HasSignatures() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Transaction) SetSignatures(v capnp.DataList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Transaction) NewSignatures(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// Transaction_List is a list of Transaction.
type Transaction_List struct{ capnp.List }

// NewTransaction creates a new list of Transaction.
func NewTransaction_List(s *capnp.Segment, sz int32) (Transaction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Transaction_List{l}, err
}

func (s Transaction_List) At(i int) Transaction { return Transaction{s.List.Struct(i)} }

func (s Transaction_List) Set(i int, v Transaction) error { return s.List.SetStruct(i, v.Struct) }

func (s Transaction_List) String() string {
	str, _ := text.MarshalList(0xec9fd906d129035f, s.List)
	return str
}

// Transaction_Promise is a wrapper for a Transaction promised by a client call.
type Transaction_Promise struct{ *capnp.Pipeline }

func (p Transaction_Promise) Struct() (Transaction, error) {
	s, err := p.Pipeline.Struct()
	return Transaction{s}, err
}

const schema_b5f3d18a6c743283 = "x\xdaL\xce\xb1J\x03A\x10\xc6\xf1\xef\xdb\xddDR" +
	"$f\xcd\xb5\xe1j-Dc\x97\xcaR+3be" +
	"#\xc7y\x91@\xd8\x84\xe4,\x04\xad\xac\x14\x05\x9b\x80" +
	"V6\x16\x1e(D\xd0\xd27\xd0\"\xa5\x8f Xi" +
	"\xef\xca)\xa2\xdd\xf0\xfb\x0f\xc3,\x9cpY-\x16\xd6" +
	"J\x80t\x0bE\xbf\xa5g'\xc5\x97\xcb7\xc8\x0c\xe9" +
	"\x0f\x1bi\xf7x\xf2\xf1\x80\x82\x99\x02j\xa7\xe6\xbdv" +
	"\x91OK#\x13\x12\x1e\xa1O\x07\x91\x1bFq\xaa:" +
	"=7\x1fG}\xd7on|S\x18\xa7\x9d\x9ek\x91" +
	"\x12h\x03\x18\x02\xf6`\x1d\x90}M9W\xb4d\xc0" +
	"\x1cGs\x80\x9ci\xca\x8d\xa2U*\xa0\x02l\x96\xe3" +
	"\x95\xa6\x8c\x15\xa9\x03j\xc0\xde6\x00\xb9\xd6\x94{E" +
	"kt@\x03\xd8\xbbM@\xc6\x9a\xf2\xa4\xf8\xf3L;" +
	"\x19\x80CV\xc0\x96&\xab>\xab\x1f\xad4W\x1f?" +
	"\x01\xe68\xddN\x92\x7fu\xaf\xfaZ\xcf\xea\xd9\xf3o" +
	"\xdd\x8e\xd2\x88e(\x96\xc1\xd0\xf5\\\x9c\xb0\x04\xc5\x12" +
	"\xe8\x87\x9d\x1d\x17\xa5\xbb\x03\xe8\xbf\x03\xf9f\x05\xfc\x0a" +
	"\x00\x00\xff\xff\x9f9I\""

func init() {
	schemas.Register(schema_b5f3d18a6c743283,
		0xec9fd906d129035f)
}
