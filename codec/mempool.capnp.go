// Code generated by capnpc-go. DO NOT EDIT.

package codec

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Mempool struct{ capnp.Struct }

// Mempool_TypeID is the unique identifier for the type Mempool.
const Mempool_TypeID = 0xf0380ead552fac15

func NewMempool(s *capnp.Segment) (Mempool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mempool{st}, err
}

func NewRootMempool(s *capnp.Segment) (Mempool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mempool{st}, err
}

func ReadRootMempool(msg *capnp.Message) (Mempool, error) {
	root, err := msg.RootPtr()
	return Mempool{root.Struct()}, err
}

func (s Mempool) String() string {
	str, _ := text.Marshal(0xf0380ead552fac15, s.Struct)
	return str
}

func (s Mempool) Bloom() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Mempool) HasBloom() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mempool) SetBloom(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Mempool_List is a list of Mempool.
type Mempool_List struct{ capnp.List }

// NewMempool creates a new list of Mempool.
func NewMempool_List(s *capnp.Segment, sz int32) (Mempool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mempool_List{l}, err
}

func (s Mempool_List) At(i int) Mempool { return Mempool{s.List.Struct(i)} }

func (s Mempool_List) Set(i int, v Mempool) error { return s.List.SetStruct(i, v.Struct) }

func (s Mempool_List) String() string {
	str, _ := text.MarshalList(0xf0380ead552fac15, s.List)
	return str
}

// Mempool_Promise is a wrapper for a Mempool promised by a client call.
type Mempool_Promise struct{ *capnp.Pipeline }

func (p Mempool_Promise) Struct() (Mempool, error) {
	s, err := p.Pipeline.Struct()
	return Mempool{s}, err
}

const schema_d644fe17b956a80f = "x\xda2pdt`2d\xf5\xe7d`\x08\xcca" +
	"e\xfb/\xbaF?t-\x9f\xc5\x07\x06A>\xc6\xff" +
	"\xfc+\xc2v\x8a\xffs\xb9\xc6\xc0\xca\xc8\xce\xc0 \xdc" +
	"\xcb\xb2Ix*\x0b\x885\x91\xc5\x9e\xe1?\x83\xfc\xff" +
	"\xdc\xd4\xdc\x82\xfc\xfc\x1c=\xc6\xe4\xc4\x82\xbc\x02+\xdf" +
	"Ty0?\x80\x911\x90\x85\x99\x85\x81\x81\x85\x91\x81" +
	"A\x90\xd7\x88\x81!\x90\x83\x991P\x84\x89Q>)" +
	"'??\x97\x91\x97\x81\x89\x91\x97\x81\x11\x10\x00\x00\xff" +
	"\xff\xf3\xda\x1c\xeb"

func init() {
	schemas.Register(schema_d644fe17b956a80f,
		0xf0380ead552fac15)
}
